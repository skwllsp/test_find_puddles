        Алгоритм поиска всех луж в матрице

Алгоритм выполняет следующую последовательность шагов:

1. Составляется упорядоченный массив высот элементов матрицы.

1.1 Для отдельной высоты матрицы запоминается число элементов с такой высотой на 
этом уровне. В дальнейшем это используется для остановки поиска луж 
на определенной высоте, когда точно ясно, что все возможные лужи на данной 
высоте уже найдены.

1.2 Плюс если элементов с такой высотой на данном уровне не больше 
1% от N*M (MAX_SAVED_PER_LEVEL), то запоминаются элементы матрицы с данным 
уровнем. Это делается, для того, чтобы быстро находить возможные лужи если матрица 
очень большая, а луж мало.
   
2. Алгоритм выполняет в цикле обход упорядоченного массива высот, на которых 
возможно образование луж (эти данные получены на шаге 1).
  
2.1 Если есть список элементов матрицы с именно такой высотой (это данные из 
оптимизации 1.2), то обход идет только по ним и алгоритм для каждой такой точки
выполняет шаг 2.3.
  
2.2 Если список элементов матрицы с такой высотой пуст (так как элементов с 
этой высотой больше чем 1% от N*M), то обходятся все элементы 
матрицы.
 Если точка имеет высоту больше, чем та, которая сейчас рассматривается,
то такая точка пропускается. 
 Если уже было ранее найдено, что эта точка находится в луже или наоборот,
точно не находится в луже, то точка тоже пропускается
 Для точек которые не требуется пропускать алгоритм выполняет шаг 2.3 

2.3 Когда выбрана точка для проверки возможна в ней лужа или нет, то алгоритм
выполняет из этой точки поиск в ширину всех записей с такой же высотой.
 Алгоритм предполагает, что вода не просачивается через стыковку двух 
элементов по ребру.
 Если в ходе поиска в ширину алгоритм выйдет на ребро матрицы, то 
лужа невозможна.
 Если выхода на ребро матрицы не произошло, то найдена лужа. Если в ходе 
поиска данной лужи были найдены соседние точки с меньшей высотой, то это значит, 
что данную лужу надо объединить с более глубокой лужей, которая была найдена 
ранее. Это делается на шаге 2.4

2.4 Если найденная лужа включает другие лужи, то такие лужи сливаются в одну.

3. После обхода всех уровней алгоритм возвращает массив найденных луж


        Сложность алгоритма
 
1. time complexity: O(N**2 * M**2)
2. space complexity: дополнительная, помимо хранения элементов матрицы, O(N*M)

        Сборка

На Windows выполняется командой make из Cygwin, компилятор gcc.
На Linux выполняется тоже make.
Исполняемый файл find_puddles помещается в подкаталог build.

Сборка юнит тестов выполняется командой make test.
Исполняемый файл find_puddles_unittest.exe помещается в подкаталог build.test.

 
        Набор тестов и отчет по тестированию

Тесты находятся в файле matrix_unittest.cpp.

Вот пример (с небольшими сокращениями) запуска юниттестов:        
$ make run_test
./build.test/find_puddles_unittest
Running main() from gtest_main.cc
[==========] Running 80 tests from 1 test case.
[----------] Global test environment set-up.
[----------] 80 tests from Matrix
...
[ RUN      ] Matrix.Five14
[       OK ] Matrix.Five14 (0 ms)
[ RUN      ] Matrix.Five15
[       OK ] Matrix.Five15 (0 ms)
[----------] 80 tests from Matrix (16 ms total)

[----------] Global test environment tear-down
[==========] 80 tests from 1 test case ran. (16 ms total)
[  PASSED  ] 80 tests.
        

        Пример вывода программы
        
1. Ни одной лужи не найдено

$ ./build/find_puddles.exe < test1.txt
$
        
2. Найдено несколько луж

$ ./build/find_puddles.exe < ./test2.txt
points: [{6,1}]
points: [{1,1}, {1,2}]
