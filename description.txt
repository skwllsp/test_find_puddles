        Алгоритм поиска всех луж в матрице, v 2.0

Алгоритм выполняет следующую последовательность шагов:

1. Составляется массив точек внешнего контура матрицы. Массив точек передается
   на обработку на шаг 2.

1. Выполняется обход массива точек контура. Выполняется поиск в ширину
   для каждой точки на внешнем контуре всех других точек, которые либо на
   том же уровне, либо на более высоком уровне. Все точки найденные на
   этом шаге являются точками на которых лужи не могут образоваться. Они 
   запоминаются как leaks points для данного контура.
   
2. Оставшиеся точки могут быть точками луж, либо точками островов в лужах,
   либо точками не луж, у которых высота мешьше точек соседних точек внешнего
   контура. Алгоритм обходит все точки, которые не попали в leaks points на шаге 1.
   
2.1 Вычисляется высота возможной лужи. Если она больше или равна соседних с ней 
    точек, то это не лужа. Если меньше, то это точка лужи.
    
2.2 Для лужи находятся все ее точки и находятся контуры островов (если есть)
    внутри лужи. Массивы точек островов передаются на шаг 2.
    
        Сложность алгоритма
 
1. time complexity

    O(N*M*log(N*M)).
    Адгоритм помещает в std::set все найденные leak points и все найденные 
    точки луж

1.2 space complexity помимо хранения matrix
 
    O(N*M) - алгоритм составлят std::set всех пройденных точек

        Сборка

На Windows выполняется командой make из Cygwin, компилятор gcc.
На Linux выполняется тоже make.
Исполняемый файл find_puddles помещается в подкаталог build.

Сборка юнит тестов выполняется командой make test.
Исполняемый файл find_puddles_unittest.exe помещается в подкаталог build.test.

 
        Набор тестов и отчет по тестированию

Тесты находятся в файле matrix_unittest.cpp.

Вот пример запуска юниттестов:        
$ make run_test

        Пример вывода программы
        
1. Ни одной лужи не найдено

$ ./build/find_puddles.exe < test1.txt
$
        
2. Найдено несколько луж

$ ./build/find_puddles.exe < test2.txt
points: [{6,1}]
points: [{1,1}, {1,2}]
